{{- if .Values.rateLimit.enabled }}
############################################
# 1) ConfigMap – limit rule
############################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: ratelimit-config
data:
  config.yaml: |
    domain: ratelimit
    descriptors:
      # bucket 1: request path “predict”
      - key: PATH
        value: "predict"
        descriptors:
          # bucket 2: x-user header
          - key: x-user
            rate_limit:
              unit: minute
              requests_per_unit: 2
---
################################
# 2) Redis – counter storage
################################
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      name: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:alpine
          ports:
            - containerPort: 6379
---
####################################################
# 3) envoyproxy/ratelimit – core rate-limit service
####################################################
apiVersion: v1
kind: Service
metadata:
  name: ratelimit
spec:
  selector:
    app: ratelimit
  ports:
    - name: http   # admin / health
      port: 8080
    - name: grpc   # Envoy talks gRPC here
      port: 8081
    - name: debug  # JSON metrics
      port: 6070
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit
spec:
  strategy:
    type: Recreate            # reload when ConfigMap changes
  selector:
    matchLabels:
      app: ratelimit
  template:
    metadata:
      labels:
        app: ratelimit
    spec:
      volumes:
        - name: cfg
          configMap:
            name: ratelimit-config
      containers:
        - name: ratelimit
          image: envoyproxy/ratelimit:30a4ce1a
          command: ["/bin/ratelimit"]
          ports:
            - containerPort: 8080
            - containerPort: 8081
            - containerPort: 6070
          env:
            - { name: LOG_LEVEL,            value: debug }
            - { name: REDIS_SOCKET_TYPE,    value: tcp }
            - { name: REDIS_URL,            value: redis:6379 }
            - { name: RUNTIME_ROOT,         value: /data }
            - { name: RUNTIME_SUBDIRECTORY, value: ratelimit }
          volumeMounts:
            - name: cfg
              mountPath: /data/ratelimit/config
---
#############################################################
# 4) EnvoyFilter A – add RateLimit filter to the gateway
#############################################################
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ratelimit-filter
  namespace: istio-system            # same namespace as ingressgateway
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER           # insert filter before router
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: ratelimit
            failure_mode_deny: true
            timeout: 1s
            rate_limit_service:
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: "outbound|8081||ratelimit.{{ .Release.Namespace }}.svc.cluster.local"
---
###################################################################
# 5) EnvoyFilter B – apply rule on /predict with x-user header
###################################################################
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ratelimit-predict
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_ROUTE
    match:
      context: GATEWAY
      routeConfiguration:
        vhost:
          name: "*:80"
    patch:
      operation: MERGE
      value: &predictRule
        route:
          rate_limits:
            - actions:
                # bucket by path /predict or /model-service/predict
                - header_value_match:
                    descriptorKey: "PATH"
                    descriptorValue: "predict"
                    headers:
                      - name: ":path"
                        safe_regex_match:
                          google_re2: {}
                          regex: "^/(model-service/)?predict.*$"
                # bucket by x-user header
                - request_headers:
                    headerName: "x-user"
                    descriptorKey: "x-user"
  - applyTo: HTTP_ROUTE
    match:
      context: GATEWAY
      routeConfiguration:
        vhost:
          name: "*:443"
    patch:
      operation: MERGE
      value: *predictRule

{{- end }}
